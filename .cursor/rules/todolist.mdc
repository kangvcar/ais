---
description: 
globs: 
alwaysApply: true
---
好的，这是一个非常棒的项目想法！`ais` 结合了系统工具、Shell 和 AI，潜力巨大。我很乐意以符合 Python 最佳实践的方式，为你分析其设计并制定一个详细的开发 TODO 列表。

在开始设计之前，我需要向您确认一些关键信息，这将帮助我更好地为你规划：

### 关键问题

1.  **Shell 兼容性**: `PROMPT_COMMAND` 是 `bash` 的一个特性，`zsh` 使用 `precmd` 和 `preexec` 钩子。我们初期应该优先支持哪种 Shell？`bash` 和 `zsh` 是最常见的选择，专注于这两者可以覆盖大多数用户。
2.  **配置管理**: 用户如何配置他们的 AI 服务（API Key, Endpoint, 模型名称等）？一个位于用户主目录下的配置文件（例如 `~/.config/ais/config.toml`）是现代 CLI 应用的最佳实践。你同意这种方式吗？
3.  **数据存储**: 命令历史和用户使用情况分析需要持久化存储。使用一个轻量级的本地数据库如 `SQLite` 是否合适？它能很好地与 Python 集成，并且是单个文件，易于管理。
4.  **错误捕获的具体实现**: 捕获 `stderr` 的方式有很多种，通常需要在 Shell 侧进行重定向。一个常见的做法是让 Shell 钩子将上一个命令的 `exit_code`、`stdout` 和 `stderr` 写入临时文件，然后由 Python 程序读取。这个方案是否符合你的预期？这比实时流式捕获要简单得多，也更可靠。

请先回答以上问题，你的回答将直接影响接下来的架构设计和 TODO 列表。

-----


*(您已回复，并同意了以下选择：优先支持 `bash` 和 `zsh`，使用 `~/.config/ais/config.toml` 进行配置，采用 `SQLite` 存储数据，并通过临时文件传递命令执行结果。)*

-----

好的，感谢您的确认。基于这些选择，我们来设计一个清晰、可扩展且符合 Python 最佳实践的架构，并制定一份详细的开发路线图。

### `ais` 程序设计与架构分析

为了保持项目简洁清晰，我们将采用模块化的设计，将不同的功能分离开来。

#### 项目结构

```
ais/
├── ais/                  # 主要的 Python 包
│   ├── __init__.py
│   ├── main.py           # Typer 应用入口
│   ├── shell_integration.py # 处理来自 Shell 钩子的数据
│   ├── context.py        # 收集上下文信息 (Git, CWD, etc.)
│   ├── ai_services.py    # AI 服务抽象层和具体实现
│   ├── prompter.py       # 构建发送给 AI 的 prompt
│   ├── renderer.py       # 渲染 Markdown 输出
│   ├── interactive.py    # 处理“执行/编辑/取消”交互
│   ├── db.py             # 数据库交互 (SQLite)
│   └── models.py         # 数据模型 (例如：UserStats, CommandHistory)
├── scripts/              # 辅助脚本
│   └── hook.sh           # Shell 钩子脚本 (bash/zsh)
├── tests/                # 测试目录
│   └── ...
├── pyproject.toml        # 项目元数据和依赖管理 (最佳实践)
├── README.md
└── .gitignore
```

#### 核心组件分析

1.  **CLI 入口 (`main.py`)**:

      * 使用 `Typer` 创建主命令 `ais`。
      * 定义子命令，如 `ais <question...>` 用于直接提问，`ais stats` 用于查看用户统计，`ais config` 用于管理配置。
      * `Typer` 能自动生成帮助信息，非常友好。

2.  **Shell 钩子 (`scripts/hook.sh`)**:

      * 这是连接 Shell 和 Python 的桥梁。它不是 Python 代码，但至关重要。
      * **职责**:
          * 在每个命令执行后被触发 (`PROMPT_COMMAND` 或 `precmd`)。
          * 获取上一个命令的退出码 (`$?`)。
          * **关键**: 只有当退出码非零，且不是由 `Ctrl+C` (通常是退出码 130) 引起时，才继续。
          * 将 `stderr` 和 `stdout` 重定向到临时文件。
          * 调用 Python 核心分析逻辑，例如 `python -m ais.shell_integration --exit-code $?`。

3.  **Shell 集成模块 (`shell_integration.py`)**:

      * 这是由钩子调用的 Python 脚本。
      * **职责**:
          * 解析从命令行参数传入的退出码和临时文件中的 `stderr`。
          * 调用 `context.py` 收集完整的上下文。
          * 调用 `prompter.py` 生成最终的 prompt。
          * 调用 `ai_services.py` 获取 AI 的分析和建议。
          * 调用 `renderer.py` 显示结果。
          * 调用 `interactive.py` 启动交互式修复流程。

4.  **AI 服务抽象层 (`ai_services.py`)**:

      * 使用**策略模式 (Strategy Pattern)**。定义一个基础的 `AIService` 抽象类，包含 `get_completion(prompt: str) -> str` 方法。
      * 为 OpenAI, Ollama 等分别创建具体的实现类，如 `OpenAIService`, `OllamaService`。
      * 程序根据配置文件动态选择使用哪个服务。这使得添加新的 AI 服务变得非常容易。

5.  **交互模块 (`interactive.py`)**:

      * 使用 `questionary` 或 `InquirerPy` 库。
      * 接收 AI 生成的建议命令。
      * 向用户提供 "执行" (Execute), "编辑" (Edit), "取消" (Cancel) 的选项。
      * **执行**: 使用 `subprocess.run()` 直接运行命令。
      * **编辑**: 获取系统默认编辑器 (`$EDITOR`)，将命令写入临时文件，然后用编辑器打开。用户保存退出后，再选择是否执行。
      * **取消**: 直接退出交互。

6.  **数据与统计 (`db.py`, `models.py`)**:

      * 使用 Python 内置的 `sqlite3`。
      * 为了代码清晰和类型安全，推荐使用 `SQLModel` (来自 `Typer` 和 `FastAPI` 的作者)。它结合了 `Pydantic` 和 `SQLAlchemy`，非常适合这个项目。
      * `models.py` 定义数据表结构，如 `CommandHistory` (记录命令、是否成功、AI建议等) 和 `UserStats`。
      * `db.py` 提供简单的函数来创建数据库连接、增删改查数据。

7.  **渲染模块 (`renderer.py`)**:

      * 使用 `rich` 库。它内置了强大的 Markdown 和语法高亮渲染功能。
      * `rich.markdown.Markdown` 类可以直接渲染 AI 返回的 Markdown 字符串，非常方便。

### 开发 TODO 列表 (由简到繁)

这是一个分阶段的开发计划，可以让你逐步构建 `ais`。

#### **Phase 0: 项目初始化与基础架构**

  * [ ] 1. **环境设置**:
      * 创建 Git 仓库。
      * 使用 `Poetry` 或 `pip`/`venv` 初始化 Python 项目。
      * 创建如上所述的目录结构。
      * 配置 `pyproject.toml`，添加 `typer`, `rich`, `questionary`, `pytomlpp` (或 `tomli`), `sqlmodel` 等核心依赖。
  * [ ] 2. **基础 CLI 入口**:
      * 在 `ais/main.py` 中，用 `Typer` 创建一个简单的 "Hello World" CLI 应用。
      * 在 `pyproject.toml` 中配置 `[project.scripts]`，使 `pip install .` 后能生成 `ais` 命令。

#### **Phase 1: 核心 AI 对话功能 (`ais <question>`)**

  * [ ] 3. **配置管理**:
      * 实现一个简单的函数，用于在 `~/.config/ais/config.toml` 不存在时创建它，并写入默认模板 (包含 API Key, model, endpoint 等字段)。
      * 实现加载配置的功能。
  * [ ] 4. **AI 服务抽象**:
      * 在 `ais/ai_services.py` 中定义 `AIService` 抽象基类。
      * 首先实现 `OpenAIService`，从配置文件中读取 API Key 和 endpoint。
  * [ ] 5. **直接对话逻辑**:
      * 在 `main.py` 中实现 `ais <question...>` 功能。
      * 它应该：收集用户输入 -\> 调用 AI 服务 -\> 获取结果。
  * [ ] 6. **Markdown 渲染**:
      * 在 `ais/renderer.py` 中创建一个函数，接收文本并使用 `rich.markdown.Markdown` 打印到终端。
      * 将上一步获取的 AI 结果通过此函数渲染。

#### **Phase 2: Shell 集成与自动错误分析**

  * [ ] 7. **Shell 钩子脚本**:
      * 在 `scripts/hook.sh` 中编写 `bash` 和 `zsh` 的钩子函数。
      * 这个脚本需要能捕获退出码 `$?` 和 `stderr`，并将它们写入一个可预测的临时文件路径 (例如 `/tmp/ais_last_command.log`)。
      * 如果退出码为 `0` 或 `130` (`Ctrl+C`)，则不执行任何操作。
      * 否则，调用 `ais _internal_analyze` (一个隐藏的 Typer 命令)。
  * [ ] 8. **上下文收集**:
      * 在 `ais/context.py` 中编写函数，用于获取：
          * 当前工作目录 (`os.getcwd()`)
          * Git 状态（分支、未提交文件等，可使用 `git` 命令的 `subprocess` 调用）
          * 操作系统信息 (`platform.system()`)
          * 最近的命令历史 (可以从 shell history 文件读取一小部分)。
  * [ ] 9. **Prompt 构建**:
      * 在 `ais/prompter.py` 中创建一个函数，它接收错误信息 (`stderr`) 和 `context.py` 收集的上下文，然后生成一个高质量、结构化的 prompt，发送给 AI。
  * [ ] 10. **实现 `_internal_analyze` 命令**:
      * 在 `main.py` 中添加一个隐藏的 Typer 命令 (例如，`_internal_analyze`)，它由 Shell 钩子调用。
      * 这个命令负责编排整个自动分析流程：读取临时文件 -\> 收集上下文 -\> 构建 prompt -\> 调用 AI -\> 渲染结果。

#### **Phase 3: 交互式修复与用户统计**

  * [ ] 11. **交互式命令执行**:
      * 在 `ais/interactive.py` 中，使用 `questionary` 实现 "Execute", "Edit", "Cancel" 流程。
      * 当 AI 的回复中包含可执行的命令代码块时，触发此交互流程。
  * [ ] 12. **数据库设置**:
      * 在 `ais/models.py` 中用 `SQLModel` 定义 `CommandHistory` 表。
      * 在 `ais/db.py` 中编写初始化数据库和插入记录的函数。
  * [ ] 13. **用户使用情况统计**:
      * 在每次 AI 调用（无论是直接提问还是错误分析）后，将相关信息（用户名、时间戳、命令、是否成功、AI建议等）存入 SQLite 数据库。
  * [ ] 14. **实现 `ais stats` 命令**:
      * 在 `main.py` 中创建 `stats` 子命令。
      * 该命令从数据库中读取当前用户的历史记录，进行简单的分析（例如，最常出错的命令、AI 使用频率等），并以表格形式（`rich.table.Table`）展示给用户。

#### **Phase 4: 完善与打包**

  * [ ] 15. **添加更多 AI 服务**:
      * 在 `ai_services.py` 中实现 `OllamaService` 和一个通用的 `OpenAICompatibleService`。
  * [ ] 16. **编写安装说明**:
      * 在 `README.md` 中详细说明用户如何安装 `ais`，以及如何在他们的 `.bashrc` 或 `.zshrc` 中添加钩子脚本。
  * [ ] 17. **编写测试**:
      * 为核心功能（如上下文收集、Prompt 构建、AI 服务调用等）编写单元测试。
  * [ ] 18. **打包发布**:
      * 确保 `pyproject.toml` 配置正确，项目可以被 `pip` 打包和安装。


这个 TODO 列表将引导你从一个最小可行产品（MVP）开始，逐步添加功能，最终实现一个完整而强大的终端助手。祝你开发顺利！