name: Release

permissions:
  contents: write
  pull-requests: write

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release'
        required: true
        type: string

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install --upgrade hatchling
        pip install -e .
        pip install pytest pytest-cov
    
    - name: Test installation
      run: |
        ais --version
        ais config --help
    
    - name: Run tests
      run: |
        pytest tests/ -v --cov=ais --cov-report=xml || echo "No tests found"

  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install --upgrade hatchling
        pip install black flake8
        pip install -e .
    
    - name: Run black
      run: black --check src/ais/
    
    - name: Run flake8
      run: flake8 src/ais/

  build:
    runs-on: ubuntu-latest
    needs: [test, lint]
    outputs:
      version: ${{ steps.version.outputs.version }}
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install --upgrade hatchling
        pip install build twine
    
    - name: Get version
      id: version
      run: |
        if [ "${{ github.event_name }}" == "release" ]; then
          VERSION="${{ github.event.release.tag_name }}"
          VERSION=${VERSION#v}  # Remove 'v' prefix if present
        else
          VERSION="${{ github.event.inputs.version }}"
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Version: $VERSION"
    
    - name: Update version in project files
      run: |
        VERSION=${{ steps.version.outputs.version }}
        # Update pyproject.toml
        sed -i "s/version = \".*\"/version = \"$VERSION\"/" pyproject.toml
        # Update __init__.py
        sed -i "s/__version__ = \".*\"/__version__ = \"$VERSION\"/" src/ais/__init__.py
        echo "Updated version to $VERSION in project files"
    
    - name: Build package
      run: python -m build
    
    - name: Check package
      run: twine check dist/*
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist-${{ steps.version.outputs.version }}
        path: dist/
        retention-days: 7

  publish-pypi:
    runs-on: ubuntu-latest
    needs: [test, lint, build]
    permissions:
      id-token: write  # For PyPI trusted publishing
    
    steps:
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist-${{ needs.build.outputs.version }}
        path: dist/
    
    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.PYPI_API_TOKEN }}
        skip-existing: true

  # 触发Docker构建
  trigger-docker-build:
    runs-on: ubuntu-latest
    needs: [build]
    if: github.event_name == 'release'
    
    steps:
    - name: Trigger Docker workflow
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.actions.createWorkflowDispatch({
            owner: context.repo.owner,
            repo: context.repo.repo,
            workflow_id: 'docker.yml',
            ref: 'main',
            inputs: {
              tag: '${{ needs.build.outputs.version }}',
              platforms: 'linux/amd64,linux/arm64'
            }
          });


  create-github-release:
    runs-on: ubuntu-latest
    needs: [publish-pypi, build]
    if: github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist-${{ needs.build.outputs.version }}
        path: dist/
    
    - name: Create Release and Upload Assets
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ needs.build.outputs.version }}
        name: Release v${{ needs.build.outputs.version }}
        body: |
          ## 🎉 AIS v${{ needs.build.outputs.version }} 发布
          
          ### 📦 安装方法
          
          #### 🐳 Docker（推荐）
          ```bash
          # 运行最新版本
          docker run -it --rm kangvcar/ais:${{ needs.build.outputs.version }}
          
          # 或使用Docker Compose
          curl -O https://raw.githubusercontent.com/kangvcar/ais/main/docker-compose.yml
          docker-compose up -d ais
          ```
          
          #### 🐍 Python包管理器
          ```bash
          # 使用pipx（推荐）
          pipx install ais-terminal
          
          # 或使用pip
          pip install ais-terminal
          ```
          
          #### ⚡ 一键安装脚本
          ```bash
          curl -sSL https://raw.githubusercontent.com/kangvcar/ais/main/scripts/install.sh | bash
          ```
          
          ### 🆕 更新内容
          
          详细更新内容请查看 [CHANGELOG.md](https://github.com/kangvcar/ais/blob/main/docs/CHANGELOG.md)
          
          ### 📚 文档
          
          - [📖 README](https://github.com/kangvcar/ais/blob/main/README.md) - 完整使用指南
          - [🐳 Docker指南](https://github.com/kangvcar/ais/blob/main/docs/DOCKER_GUIDE.md) - 容器化部署
          - [🏢 部署指南](https://github.com/kangvcar/ais/blob/main/docs/DEPLOYMENT_GUIDE.md) - 生产环境部署
          - [🔧 开发指南](https://github.com/kangvcar/ais/blob/main/docs/DEVELOPMENT.md) - 开发环境设置
          
          ### 🔗 相关链接
          
          - 🐳 [Docker Hub](https://hub.docker.com/r/kangvcar/ais)
          - 📦 [PyPI](https://pypi.org/project/ais-terminal/)
          - 📋 [GitHub](https://github.com/kangvcar/ais)
        draft: false
        prerelease: false
        files: dist/*
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  test-installation:
    runs-on: ${{ matrix.os }}
    needs: [publish-pypi, build]
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        method: [pip, script]
    
    steps:
    - name: Test pip installation
      if: matrix.method == 'pip'
      run: |
        python -m pip install --upgrade ais-terminal
        ais --version
    
    - name: Test script installation (Unix)
      if: matrix.method == 'script' && matrix.os != 'windows-latest'
      run: |
        curl -sSL https://raw.githubusercontent.com/kangvcar/ais/main/scripts/install.sh | bash
        ais --version
    

  notify:
    runs-on: ubuntu-latest
    needs: [publish-pypi, test-installation, build]
    if: always()
    
    steps:
    - name: Notify success
      if: needs.publish-pypi.result == 'success'
      run: |
        echo "🎉 AIS v${{ needs.build.outputs.version }} 发布成功！"
        echo "📦 PyPI: https://pypi.org/project/ais-terminal/${{ needs.build.outputs.version }}/"
        echo "✅ 安装测试通过"
    
    - name: Notify failure
      if: needs.publish-pypi.result == 'failure'
      run: |
        echo "❌ 发布失败"
        exit 1