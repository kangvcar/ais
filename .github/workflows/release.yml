name: Release

# This workflow requires a Personal Access Token (PAT) for creating pull requests
# Add a secret named 'GH_PAT' with the following scopes:
# - repo (Full control of private repositories)
# - pull_requests (Access to pull requests)
# 
# To create a PAT:
# 1. Go to GitHub Settings > Developer settings > Personal access tokens
# 2. Generate new token with 'repo' scope
# 3. Add it as a repository secret named 'GH_PAT'

permissions:
  contents: write
  pull-requests: write

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release'
        required: true
        type: string

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        pip install pytest pytest-cov
    
    - name: Test installation
      run: |
        ais --version
        ais config --help
    
    - name: Run tests
      run: |
        pytest tests/ -v --cov=ais --cov-report=xml || echo "No tests found"

  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install black flake8
        pip install -e .
    
    - name: Run black
      run: black --check src/ais/
    
    - name: Run flake8
      run: flake8 src/ais/

  build:
    runs-on: ubuntu-latest
    needs: [test, lint]
    outputs:
      version: ${{ steps.version.outputs.version }}
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
    
    - name: Get version
      id: version
      run: |
        if [ "${{ github.event_name }}" == "release" ]; then
          VERSION="${{ github.event.release.tag_name }}"
          VERSION=${VERSION#v}  # Remove 'v' prefix if present
        else
          VERSION="${{ github.event.inputs.version }}"
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Version: $VERSION"
    
    - name: Build package
      run: python -m build
    
    - name: Check package
      run: twine check dist/*
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist-${{ steps.version.outputs.version }}
        path: dist/
        retention-days: 7

  publish-pypi:
    runs-on: ubuntu-latest
    needs: [test, lint, build]
    permissions:
      id-token: write  # For PyPI trusted publishing
    
    steps:
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist-${{ needs.build.outputs.version }}
        path: dist/
    
    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.PYPI_API_TOKEN }}
        skip-existing: true

  create-homebrew-pr:
    runs-on: ubuntu-latest
    needs: [publish-pypi, build]
    if: always() && needs.publish-pypi.result == 'success'
    permissions:
      contents: write
      pull-requests: write
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        # Use PAT for checkout to ensure proper permissions for PR creation
        token: ${{ secrets.GH_PAT || secrets.GITHUB_TOKEN }}
    
    - name: Create Git Tag
      run: |
        VERSION=${{ needs.build.outputs.version }}
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        
        # Check if tag already exists locally
        if git rev-parse "v${VERSION}" >/dev/null 2>&1; then
          echo "Tag v${VERSION} already exists locally"
        else
          git tag -a "v${VERSION}" -m "Release v${VERSION}"
          echo "Created tag v${VERSION}"
        fi
        
        # Check if tag already exists on remote
        if git ls-remote --tags origin | grep -q "refs/tags/v${VERSION}$"; then
          echo "Tag v${VERSION} already exists on remote"
        else
          git push origin "v${VERSION}"
          echo "Pushed tag v${VERSION} to remote"
        fi
    
    - name: Generate SHA256 for Homebrew
      id: sha256
      run: |
        VERSION=${{ needs.build.outputs.version }}
        URL="https://github.com/kangvcar/ais/archive/refs/tags/v${VERSION}.tar.gz"
        # Wait a moment for GitHub to process the tag
        sleep 10
        SHA256=$(curl -sL "$URL" | sha256sum | cut -d' ' -f1)
        echo "sha256=$SHA256" >> $GITHUB_OUTPUT
        echo "url=$URL" >> $GITHUB_OUTPUT
        echo "Generated SHA256: $SHA256 for URL: $URL"
    
    - name: Update Homebrew formula
      run: |
        VERSION=${{ needs.build.outputs.version }}
        SHA256=${{ steps.sha256.outputs.sha256 }}
        URL=${{ steps.sha256.outputs.url }}
        
        # Update ais.rb with new version and SHA256
        sed -i "s/version \".*\"/version \"$VERSION\"/" ais.rb
        sed -i "s/sha256 \".*\"/sha256 \"$SHA256\"/" ais.rb
        sed -i "s|url \".*\"|url \"$URL\"|" ais.rb
    
    - name: Create Pull Request for Homebrew
      uses: peter-evans/create-pull-request@v5
      with:
        # Use PAT instead of GITHUB_TOKEN for PR creation permissions
        token: ${{ secrets.GH_PAT || secrets.GITHUB_TOKEN }}
        commit-message: "Update Homebrew formula to v${{ needs.build.outputs.version }}"
        title: "Update Homebrew formula to v${{ needs.build.outputs.version }}"
        body: |
          Auto-generated PR to update Homebrew formula to version ${{ needs.build.outputs.version }}
          
          Changes:
          - Update version to ${{ needs.build.outputs.version }}
          - Update SHA256 hash
          - Update download URL
          
          This PR is automatically created by the release workflow.
          
          **Note**: If this PR creation fails, ensure that a Personal Access Token (PAT) 
          with 'repo' and 'pull_requests' scopes is configured as the `GH_PAT` secret.
        branch: homebrew-update-v${{ needs.build.outputs.version }}
        base: main
        delete-branch: true

  create-github-release:
    runs-on: ubuntu-latest
    needs: [publish-pypi, build]
    if: github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist-${{ needs.build.outputs.version }}
        path: dist/
    
    - name: Create Release and Upload Assets
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ needs.build.outputs.version }}
        name: Release v${{ needs.build.outputs.version }}
        body: |
          ## 🎉 AIS v${{ needs.build.outputs.version }} 发布
          
          ### 安装方法
          
          **Python包管理器**:
          ```bash
          pip install ais-terminal
          ```
          
          **Homebrew (macOS/Linux)**:
          ```bash
          brew install ais
          ```
          
          **一键安装脚本**:
          ```bash
          curl -sSL https://raw.githubusercontent.com/kangvcar/ais/main/scripts/install.sh | bash
          ```
          
          ### 更新内容
          
          详细更新内容请查看 [CHANGELOG.md](https://github.com/kangvcar/ais/blob/main/docs/CHANGELOG.md)
          
          ### 文档
          
          - [README](https://github.com/kangvcar/ais/blob/main/docs/README.md)
          - [部署指南](https://github.com/kangvcar/ais/blob/main/docs/DEPLOYMENT_GUIDE.md)
        draft: false
        prerelease: false
        files: dist/*
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  test-installation:
    runs-on: ${{ matrix.os }}
    needs: [publish-pypi, build]
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        method: [pip, script]
    
    steps:
    - name: Test pip installation
      if: matrix.method == 'pip'
      run: |
        python -m pip install --upgrade ais-terminal
        ais --version
    
    - name: Test script installation (Unix)
      if: matrix.method == 'script' && matrix.os != 'windows-latest'
      run: |
        curl -sSL https://raw.githubusercontent.com/kangvcar/ais/main/scripts/install.sh | bash
        ais --version
    

  notify:
    runs-on: ubuntu-latest
    needs: [publish-pypi, create-homebrew-pr, test-installation, build]
    if: always()
    
    steps:
    - name: Notify success
      if: needs.publish-pypi.result == 'success'
      run: |
        echo "🎉 AIS v${{ needs.build.outputs.version }} 发布成功！"
        echo "📦 PyPI: https://pypi.org/project/ais-terminal/${{ needs.build.outputs.version }}/"
        echo "🍺 Homebrew PR已创建"
        echo "✅ 安装测试通过"
    
    - name: Notify failure
      if: needs.publish-pypi.result == 'failure'
      run: |
        echo "❌ 发布失败"
        exit 1