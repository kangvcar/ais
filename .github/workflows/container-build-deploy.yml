# 容器构建和部署工作流 - 构建、测试、发布Docker镜像
# 自动化Docker镜像的完整生命周期管理
name: Container Build & Deploy

on:
  # 主分支推送时构建最新镜像（仅当相关文件变更时）
  push:
    branches: [ main ]
    paths:
      - 'src/**'
      - 'Dockerfile'
      - 'pyproject.toml'
      - 'setup.py'
      - '.github/workflows/container-build-deploy.yml'
  
  # 发布新版本时自动构建版本标签
  release:
    types: [published]
  
  # 接收来自Release工作流的触发
  workflow_run:
    workflows: ["Package Release"]
    types: [completed]
    branches: [main]
  
  # 允许手动触发构建
  workflow_dispatch:
    inputs:
      tag:
        description: 'Docker tag to build'
        required: false
        default: 'latest'
        type: string
      platforms:
        description: 'Target platforms'
        required: false
        default: 'linux/amd64,linux/arm64'
        type: string

# 限制并发执行
concurrency:
  group: container-${{ github.ref }}
  cancel-in-progress: true

env:
  REGISTRY: docker.io
  IMAGE_NAME: kangvcar/ais

jobs:
  # 构建和推送Docker镜像
  build-and-push:
    name: Build & Push Container Image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write # for uploading SARIF results
    
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tags: ${{ steps.meta.outputs.tags }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        platforms: linux/amd64,linux/arm64
        driver-opts: image=moby/buildkit:buildx-stable-1

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          # 为release设置版本标签
          type=ref,event=tag
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          # 为主分支设置latest标签
          type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' }}
          # 为push事件添加带SHA的开发标签
          type=raw,value=main-{{sha}},enable=${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
          # 手动触发时使用自定义标签
          type=raw,value={{inputs.tag}},enable=${{ github.event_name == 'workflow_dispatch' }}
        labels: |
          org.opencontainers.image.title=AIS - AI智能终端助手
          org.opencontainers.image.description=AI-powered terminal assistant for intelligent error analysis and learning
          org.opencontainers.image.vendor=AIS Team

    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        platforms: ${{ github.event.inputs.platforms || 'linux/amd64,linux/arm64' }}
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        # 构建参数
        build-args: |
          VERSION=${{ github.ref_name }}
          BUILD_DATE=${{ github.event.head_commit.timestamp }}
          VCS_REF=${{ github.sha }}

    - name: Generate SBOM
      uses: anchore/sbom-action@v0
      with:
        image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ steps.build.outputs.digest }}
        format: spdx-json
        output-file: sbom.spdx.json

    - name: Security scan with Trivy
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ steps.build.outputs.digest }}
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Upload SBOM as artifact
      uses: actions/upload-artifact@v4
      with:
        name: sbom-${{ github.sha }}
        path: sbom.spdx.json
        retention-days: 30

  # 测试构建的镜像
  test-image:
    name: Test Container Image
    runs-on: ubuntu-latest
    needs: build-and-push
    strategy:
      matrix:
        platform: [linux/amd64, linux/arm64]
    
    steps:
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        platforms: ${{ matrix.platform }}

    - name: Set up QEMU for cross-platform testing
      if: matrix.platform == 'linux/arm64'
      uses: docker/setup-qemu-action@v3
      with:
        platforms: arm64

    - name: Test Docker image functionality
      run: |
        # 调试信息
        echo "=== DEBUG INFO ==="
        echo "Image tags output: '${{ needs.build-and-push.outputs.image-tags }}'"
        echo "Image digest output: '${{ needs.build-and-push.outputs.image-digest }}'"
        echo "=================="
        
        # 提取第一个标签进行测试
        IMAGE_TAGS="${{ needs.build-and-push.outputs.image-tags }}"
        IMAGE_DIGEST="${{ needs.build-and-push.outputs.image-digest }}"
        
        # 提取第一个非空标签
        IMAGE_TAG=$(echo "$IMAGE_TAGS" | tr '\n' ' ' | tr ',' ' ' | awk '{print $1}' | xargs)
        
        if [ -z "$IMAGE_TAG" ]; then
          echo "Warning: No image tag found, trying with digest"
          if [ -n "$IMAGE_DIGEST" ]; then
            IMAGE_TAG="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@$IMAGE_DIGEST"
            echo "Using image with digest: $IMAGE_TAG"
          else
            echo "Error: No image tag or digest found in build output"
            echo "Tags output: '$IMAGE_TAGS'"
            echo "Digest output: '$IMAGE_DIGEST'"
            exit 1
          fi
        else
          echo "Using image tag: $IMAGE_TAG"
        fi
        
        # 验证镜像架构
        echo "=== 验证镜像架构 ==="
        docker run --rm --platform ${{ matrix.platform }} $IMAGE_TAG uname -m
        
        # 基本功能测试
        echo "=== 基本功能测试 ==="
        docker run --rm --platform ${{ matrix.platform }} $IMAGE_TAG ais --version
        docker run --rm --platform ${{ matrix.platform }} $IMAGE_TAG ais --help
        
        # 配置测试
        echo "=== 配置测试 ==="
        docker run --rm --platform ${{ matrix.platform }} $IMAGE_TAG ais config || true
        
        # 简化的健康检查测试（避免超时）
        echo "=== 健康检查测试 ==="
        docker run --rm --platform ${{ matrix.platform }} \
          --health-cmd="ais --version" \
          --health-interval=5s \
          --health-timeout=3s \
          --health-retries=2 \
          $IMAGE_TAG sh -c "sleep 8 && ais --version"

  # 更新Docker Hub描述
  update-dockerhub-description:
    name: Update Docker Hub Description
    runs-on: ubuntu-latest
    needs: [build-and-push, test-image]
    if: github.event_name == 'release' || (github.event_name == 'push' && github.ref == 'refs/heads/main')
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Update Docker Hub Description
      uses: peter-evans/dockerhub-description@v4
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
        repository: ${{ env.IMAGE_NAME }}
        short-description: "AIS - AI智能终端助手，让命令行更智能，让学习更高效"
        readme-filepath: ./README.md

  # 构建成功通知
  notify-success:
    name: Notify Build Success
    runs-on: ubuntu-latest
    needs: [build-and-push, test-image]
    if: always() && needs.build-and-push.result == 'success' && needs.test-image.result == 'success'
    
    steps:
    - name: Notify success
      run: |
        echo "🐳 Docker镜像构建成功！"
        echo "📋 镜像标签:"
        echo "${{ needs.build-and-push.outputs.image-tags }}"
        echo "🔐 镜像摘要: ${{ needs.build-and-push.outputs.image-digest }}"
        echo "🌐 Docker Hub: https://hub.docker.com/r/${{ env.IMAGE_NAME }}"
        
        # 如果是发布版本，显示使用说明
        if [ "${{ github.event_name }}" == "release" ]; then
          echo ""
          echo "🎉 新版本发布成功！"
          echo "使用方法:"
          echo "docker run -it --rm ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}"
        fi

  # 构建失败通知
  notify-failure:
    name: Notify Build Failure
    runs-on: ubuntu-latest
    needs: [build-and-push, test-image]
    if: always() && (needs.build-and-push.result == 'failure' || needs.test-image.result == 'failure')
    
    steps:
    - name: Notify failure
      run: |
        echo "❌ Docker构建失败"
        echo "请检查构建日志"
        exit 1

  # 清理旧的镜像标签（可选）
  cleanup-old-images:
    name: Cleanup Old Images
    runs-on: ubuntu-latest
    needs: [build-and-push, test-image]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Delete old development tags
      uses: actions/github-script@v7
      with:
        script: |
          // 这里可以添加清理逻辑，删除过期的开发标签
          // 保留最近的10个main分支构建的镜像
          console.log('清理功能可以根据需要实现');
      continue-on-error: true