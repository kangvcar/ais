# 包发布工作流 - 发布到PyPI和GitHub Releases
# 自动化版本发布流程，包括测试、构建、发布和后续流程触发
name: Package Release

permissions:
  contents: write
  pull-requests: write

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release'
        required: true
        type: string

jobs:
  # 使用共享工作流进行发布前质量检查
  pre-release-checks:
    name: Pre-release Quality Checks
    uses: ./.github/workflows/shared-quality-checks.yml
    with:
      skip_coverage: true
      python_versions: '["3.8", "3.9", "3.10", "3.11", "3.12"]'
      operating_systems: '["ubuntu-latest", "macos-latest"]'
    secrets: inherit

  # 构建发布包
  build-packages:
    name: Build Release Packages
    runs-on: ubuntu-latest
    needs: pre-release-checks
    permissions:
      contents: read
    
    outputs:
      version: ${{ steps.version.outputs.version }}
      wheel-path: ${{ steps.build.outputs.wheel-path }}
      sdist-path: ${{ steps.build.outputs.sdist-path }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine wheel

    - name: Extract version
      id: version
      run: |
        if [ "${{ github.event_name }}" == "release" ]; then
          VERSION=${{ github.ref_name }}
        else
          VERSION=${{ github.event.inputs.version }}
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Building version: $VERSION"

    - name: Update version in project files
      run: |
        VERSION=${{ steps.version.outputs.version }}
        echo "Updating version to: $VERSION"
        
        # 更新 pyproject.toml 中的版本
        sed -i "s/version = \".*\"/version = \"$VERSION\"/" pyproject.toml
        
        # 更新 __init__.py 中的版本
        sed -i "s/__version__ = \".*\"/__version__ = \"$VERSION\"/" src/ais/__init__.py
        
        # 验证更新结果
        echo "=== 更新后的版本信息 ==="
        grep "version = " pyproject.toml
        grep "__version__ = " src/ais/__init__.py

    - name: Build packages
      id: build
      run: |
        python -m build
        
        # 验证构建的包
        echo "=== 构建的包 ==="
        ls -la dist/
        
        # 输出包路径
        WHEEL_PATH=$(find dist/ -name "*.whl" -type f | head -1)
        SDIST_PATH=$(find dist/ -name "*.tar.gz" -type f | head -1)
        
        echo "wheel-path=$WHEEL_PATH" >> $GITHUB_OUTPUT
        echo "sdist-path=$SDIST_PATH" >> $GITHUB_OUTPUT

    - name: Verify packages
      run: |
        # 验证包的完整性
        python -m twine check dist/*
        
        # 测试wheel包安装
        pip install dist/*.whl
        ais --version
        
        # 测试包导入
        python -c "import ais; print(f'Package version: {ais.__version__}')"

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: release-packages-${{ steps.version.outputs.version }}
        path: dist/
        retention-days: 30

  # 发布到PyPI
  publish-pypi:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: build-packages
    # 在build-packages成功后，根据触发事件决定是否发布到PyPI
    if: needs.build-packages.result == 'success'
    permissions:
      id-token: write  # IMPORTANT: this permission is mandatory for trusted publishing
      contents: read
    
    outputs:
      published: ${{ steps.publish_check.outputs.published }}
    
    steps:
    - name: Check if should publish
      id: publish_check
      run: |
        if [ "${{ github.event_name }}" == "release" ] || [ "${{ github.event_name }}" == "workflow_dispatch" -a -n "${{ github.event.inputs.version }}" ]; then
          echo "published=true" >> $GITHUB_OUTPUT
          echo "🎯 将发布到PyPI"
        else
          echo "published=false" >> $GITHUB_OUTPUT
          echo "⏭️ 跳过PyPI发布"
        fi

    - name: Download build artifacts
      if: steps.publish_check.outputs.published == 'true'
      uses: actions/download-artifact@v4
      with:
        name: release-packages-${{ needs.build-packages.outputs.version }}
        path: dist/

    - name: Publish to PyPI
      if: steps.publish_check.outputs.published == 'true'
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        skip-existing: true
        verbose: true
        
    - name: Skip PyPI publication
      if: steps.publish_check.outputs.published == 'false'
      run: |
        echo "⏭️ 跳过PyPI发布（手动触发且未指定版本）"
        echo "如需发布到PyPI，请在workflow_dispatch时提供version参数"

  # 创建GitHub Release
  create-github-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: build-packages
    # 在build-packages成功后，根据触发事件决定是否创建GitHub Release
    if: needs.build-packages.result == 'success'
    permissions:
      contents: write
    
    steps:
    - name: Check if should create release
      id: should_create
      run: |
        if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
          echo "should_create=true" >> $GITHUB_OUTPUT
          echo "🎯 手动触发，将创建GitHub Release"
        elif [ "${{ github.event_name }}" == "release" ]; then
          echo "should_create=false" >> $GITHUB_OUTPUT  
          echo "⏭️ 跳过GitHub Release创建（已通过release事件触发）"
        else
          echo "should_create=false" >> $GITHUB_OUTPUT
          echo "⏭️ 跳过GitHub Release创建（触发条件不匹配）"
        fi

    - name: Checkout repository
      if: steps.should_create.outputs.should_create == 'true'
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Download build artifacts
      if: steps.should_create.outputs.should_create == 'true'
      uses: actions/download-artifact@v4
      with:
        name: release-packages-${{ needs.build-packages.outputs.version }}
        path: dist/

    - name: Update CHANGELOG.md for release
      if: steps.should_create.outputs.should_create == 'true'
      run: |
        VERSION=${{ needs.build-packages.outputs.version }}
        
        if [ -f CHANGELOG.md ]; then
          # 检查是否已经有这个版本的章节
          if ! grep -q "^## \[$VERSION\]" CHANGELOG.md; then
            # 如果没有，将Unreleased内容移动到新版本章节
            echo "Creating version section for $VERSION in CHANGELOG.md"
            
            # 创建临时文件头部
            echo "# Changelog" > temp_changelog.md
            echo "" >> temp_changelog.md
            echo "所有对此项目的重要更改都将记录在此文件中。" >> temp_changelog.md
            echo "" >> temp_changelog.md
            echo "格式基于 [Keep a Changelog](https://keepachangelog.com/zh-CN/1.0.0/)," >> temp_changelog.md
            echo "并且此项目遵循 [语义化版本控制](https://semver.org/lang/zh-CN/)。" >> temp_changelog.md
            echo "" >> temp_changelog.md
            echo "## [Unreleased]" >> temp_changelog.md
            echo "" >> temp_changelog.md
            
            # 添加新版本章节
            echo "## [$VERSION] - $(date '+%Y-%m-%d')" >> temp_changelog.md
            echo "" >> temp_changelog.md
            
            # 提取Unreleased部分的内容（排除空行和标题）
            UNRELEASED_CONTENT=$(awk '/^## \[Unreleased\]/{flag=1;next}/^## \[/{flag=0}flag && NF>0' CHANGELOG.md)
            
            # 如果Unreleased内容不为空，则添加到版本章节
            if [ -n "$UNRELEASED_CONTENT" ]; then
              echo "$UNRELEASED_CONTENT" >> temp_changelog.md
            else
              echo "### Changed" >> temp_changelog.md
              echo "- 发布版本 $VERSION" >> temp_changelog.md
            fi
            echo "" >> temp_changelog.md
            
            # 添加现有的版本章节
            awk '/^## \[.*\] - [0-9]/{flag=1}flag' CHANGELOG.md >> temp_changelog.md
            
            # 替换原文件
            mv temp_changelog.md CHANGELOG.md
            
            echo "CHANGELOG.md updated with version $VERSION"
          else
            echo "Version $VERSION already exists in CHANGELOG.md"
          fi
        fi

    - name: Generate release notes
      if: steps.should_create.outputs.should_create == 'true'
      id: release_notes
      run: |
        VERSION=${{ needs.build-packages.outputs.version }}
        echo "Generating release notes for version $VERSION"
        
        # 从CHANGELOG.md提取发布说明
        if [ -f CHANGELOG.md ]; then
          # 提取特定版本的章节内容
          VERSION_SECTION=$(awk "/^## \[$VERSION\]/{flag=1;next}/^## \[/{flag=0}flag && NF>0" CHANGELOG.md)
          
          if [ -n "$VERSION_SECTION" ]; then
            # 找到了特定版本的章节
            echo "release_notes<<EOF" >> $GITHUB_OUTPUT
            echo "$VERSION_SECTION" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          else
            # 如果找不到版本章节，尝试从Unreleased提取
            UNRELEASED_SECTION=$(awk '/^## \[Unreleased\]/{flag=1;next}/^## \[/{flag=0}flag && NF>0' CHANGELOG.md)
            if [ -n "$UNRELEASED_SECTION" ]; then
              echo "release_notes<<EOF" >> $GITHUB_OUTPUT
              echo "$UNRELEASED_SECTION" >> $GITHUB_OUTPUT
              echo "EOF" >> $GITHUB_OUTPUT
            else
              # 使用默认发布说明
              echo "release_notes=发布版本 $VERSION" >> $GITHUB_OUTPUT
            fi
          fi
        else
          echo "release_notes=发布版本 $VERSION" >> $GITHUB_OUTPUT
        fi

    - name: Create release
      if: steps.should_create.outputs.should_create == 'true'
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ needs.build-packages.outputs.version }}
        name: "Release ${{ needs.build-packages.outputs.version }}"
        body: |
          ## 📦 安装方法
          
          ```bash
          # 使用pip安装
          pip install ais-terminal==${{ needs.build-packages.outputs.version }}
          
          # 使用Docker运行
          docker run -it --rm kangvcar/ais:${{ needs.build-packages.outputs.version }}
          ```
          
          ## 📋 更新内容
          
          ${{ steps.release_notes.outputs.release_notes }}
          
          ## 🔗 相关链接
          
          - [PyPI页面](https://pypi.org/project/ais-terminal/${{ needs.build-packages.outputs.version }}/)
          - [Docker Hub](https://hub.docker.com/r/kangvcar/ais)
          - [项目文档](https://github.com/kangvcar/ais)
        files: |
          dist/*
        draft: false
        prerelease: false

    - name: Commit updated CHANGELOG.md
      if: steps.should_create.outputs.should_create == 'true'
      run: |
        # 配置git用户信息
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # 检查是否有更改
        if ! git diff --quiet CHANGELOG.md; then
          git add CHANGELOG.md
          git commit -m "更新CHANGELOG.md for version ${{ needs.build-packages.outputs.version }}"
          git push
          echo "CHANGELOG.md committed and pushed"
        else
          echo "No changes to CHANGELOG.md"
        fi

  # 发布后安装测试
  test-installation:
    name: Test Installation from PyPI
    runs-on: ${{ matrix.os }}
    needs: [build-packages, publish-pypi]
    # 只有在实际发布到PyPI时才运行测试
    if: needs.publish-pypi.result == 'success' && needs.publish-pypi.outputs.published == 'true'
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        python-version: ['3.8', '3.11', '3.12']
    
    steps:
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Wait for PyPI package availability
      run: |
        VERSION="${{ needs.build-packages.outputs.version }}"
        echo "🔍 等待PyPI包 ais-terminal==$VERSION 可用..."
        
        # 智能等待逻辑：最多等待10分钟，每30秒检查一次
        max_attempts=20
        attempt=1
        
        while [ $attempt -le $max_attempts ]; do
          echo "📦 第 $attempt/$max_attempts 次检查..."
          
          # 检查包是否可用
          if pip index versions ais-terminal 2>/dev/null | grep -q "$VERSION"; then
            echo "✅ 包 ais-terminal==$VERSION 已在PyPI上可用！"
            break
          fi
          
          if [ $attempt -eq $max_attempts ]; then
            echo "❌ 等待超时：包在10分钟内仍未在PyPI上可用"
            echo "🔍 当前可用版本："
            pip index versions ais-terminal 2>/dev/null || echo "无法获取版本信息"
            exit 1
          fi
          
          echo "⏳ 包尚未可用，等待30秒后重试..."
          sleep 30
          attempt=$((attempt + 1))
        done

    - name: Install from PyPI with retry
      run: |
        VERSION="${{ needs.build-packages.outputs.version }}"
        echo "📦 安装 ais-terminal==$VERSION..."
        
        # 安装时也添加重试逻辑
        max_attempts=3
        attempt=1
        
        while [ $attempt -le $max_attempts ]; do
          echo "🚀 第 $attempt/$max_attempts 次安装尝试..."
          
          if pip install ais-terminal==$VERSION; then
            echo "✅ 安装成功！"
            break
          fi
          
          if [ $attempt -eq $max_attempts ]; then
            echo "❌ 安装失败：已重试 $max_attempts 次"
            exit 1
          fi
          
          echo "⏳ 安装失败，等待30秒后重试..."
          sleep 30
          attempt=$((attempt + 1))
        done

    - name: Test installation
      run: |
        ais --version
        python -c "import ais; print(f'✓ Successfully installed version: {ais.__version__}')"

  # 发布成功通知
  notify-release-success:
    name: Notify Release Success
    runs-on: ubuntu-latest
    needs: [build-packages, publish-pypi, create-github-release, test-installation]
    if: always() && needs.build-packages.result == 'success'
    
    steps:
    - name: Notify success
      run: |
        echo "🎉 版本 ${{ needs.build-packages.outputs.version }} 构建成功！"
        echo ""
        
        # 检查PyPI发布状态
        if [ "${{ needs.publish-pypi.result }}" == "success" ] && [ "${{ needs.publish-pypi.outputs.published }}" == "true" ]; then
          echo "✅ PyPI发布成功"
          echo "📦 PyPI: https://pypi.org/project/ais-terminal/${{ needs.build-packages.outputs.version }}/"
          echo "安装命令: pip install ais-terminal==${{ needs.build-packages.outputs.version }}"
          
          # 检查安装测试状态
          if [ "${{ needs.test-installation.result }}" == "success" ]; then
            echo "✅ 安装测试通过"
          elif [ "${{ needs.test-installation.result }}" == "failure" ]; then
            echo "❌ 安装测试失败"
          else
            echo "⏭️ 安装测试已跳过"
          fi
        else
          echo "⏭️ PyPI发布已跳过"
        fi
        
        echo ""
        
        # 检查GitHub Release状态
        if [ "${{ needs.create-github-release.result }}" == "success" ]; then
          echo "✅ GitHub Release创建成功"
          echo "📋 GitHub Release: https://github.com/${{ github.repository }}/releases/tag/${{ needs.build-packages.outputs.version }}"
        else
          echo "⏭️ GitHub Release创建已跳过"
        fi
        
        echo ""
        echo "🐳 Docker镜像将在几分钟内自动构建完成"
        echo "📋 Docker Hub: https://hub.docker.com/r/kangvcar/ais"
        echo "Docker命令: docker run -it --rm kangvcar/ais:${{ needs.build-packages.outputs.version }}"